// Code generated by MockGen. DO NOT EDIT.
// Source: ../producer.go

// Package eventstest is a generated GoMock package.
package eventstest

import (
	context "context"
	reflect "reflect"

	events "github.com/blacklane/go-libs/x/events"
	gomock "github.com/golang/mock/gomock"
)

// MockProducer is a mock of Producer interface.
type MockProducer struct {
	ctrl     *gomock.Controller
	recorder *MockProducerMockRecorder
}

// MockProducerMockRecorder is the mock recorder for MockProducer.
type MockProducerMockRecorder struct {
	mock *MockProducer
}

// NewMockProducer creates a new mock instance.
func NewMockProducer(ctrl *gomock.Controller) *MockProducer {
	mock := &MockProducer{ctrl: ctrl}
	mock.recorder = &MockProducerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProducer) EXPECT() *MockProducerMockRecorder {
	return m.recorder
}

// HandleEvents mocks base method.
func (m *MockProducer) HandleEvents() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleEvents")
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleEvents indicates an expected call of HandleEvents.
func (mr *MockProducerMockRecorder) HandleEvents() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleEvents", reflect.TypeOf((*MockProducer)(nil).HandleEvents))
}

// Send mocks base method.
func (m *MockProducer) Send(event events.Event, topic string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", event, topic)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockProducerMockRecorder) Send(event, topic interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockProducer)(nil).Send), event, topic)
}

// SendCtx mocks base method.
func (m *MockProducer) SendCtx(ctx context.Context, eventName string, event events.Event, topic string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendCtx", ctx, eventName, event, topic)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendCtx indicates an expected call of SendCtx.
func (mr *MockProducerMockRecorder) SendCtx(ctx, eventName, event, topic interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendCtx", reflect.TypeOf((*MockProducer)(nil).SendCtx), ctx, eventName, event, topic)
}

// SendWithTrackingID mocks base method.
func (m *MockProducer) SendWithTrackingID(trackingID string, event events.Event, topic string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendWithTrackingID", trackingID, event, topic)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendWithTrackingID indicates an expected call of SendWithTrackingID.
func (mr *MockProducerMockRecorder) SendWithTrackingID(trackingID, event, topic interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendWithTrackingID", reflect.TypeOf((*MockProducer)(nil).SendWithTrackingID), trackingID, event, topic)
}

// Shutdown mocks base method.
func (m *MockProducer) Shutdown(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Shutdown", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Shutdown indicates an expected call of Shutdown.
func (mr *MockProducerMockRecorder) Shutdown(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Shutdown", reflect.TypeOf((*MockProducer)(nil).Shutdown), ctx)
}
